#version 430

#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) buffer position_buffer {
  vec3 position[];
};

layout(std430, binding = 2) buffer selection_buffer {
  uint selection[];
};

uniform int number_of_active_selections;
uniform int number_of_active_negative_selections;
uniform float active_selection[16 * 10];
uniform float active_negative_selection[16 * 10];

void main() {

  uint id = gl_GlobalInvocationID.x;
  vec3 vertex = position[id];

  bool active_selected = false;
  int last_selection_if_selected = -1;
  for (int i = 0; i < number_of_active_selections; i++) {
    vec3 orig = vec3(
      active_selection[i * 16 + 0 * 3 + 0],
      active_selection[i * 16 + 0 * 3 + 1],
      active_selection[i * 16 + 0 * 3 + 2]);
    vec3 dir0 = vec3(
      active_selection[i * 16 + 1 * 3 + 0],
      active_selection[i * 16 + 1 * 3 + 1],
      active_selection[i * 16 + 1 * 3 + 2]);
    vec3 dir1 = vec3(
      active_selection[i * 16 + 2 * 3 + 0],
      active_selection[i * 16 + 2 * 3 + 1],
      active_selection[i * 16 + 2 * 3 + 2]);
    vec3 dir2 = vec3(
      active_selection[i * 16 + 3 * 3 + 0],
      active_selection[i * 16 + 3 * 3 + 1],
      active_selection[i * 16 + 3 * 3 + 2]);
    vec3 dir3 = vec3(
      active_selection[i * 16 + 4 * 3 + 0],
      active_selection[i * 16 + 4 * 3 + 1],
      active_selection[i * 16 + 4 * 3 + 2]);

    vec3 N0 = normalize(cross(normalize(dir0), normalize(dir1)));
    vec3 N1 = normalize(cross(normalize(dir1), normalize(dir2)));
    vec3 N2 = normalize(cross(normalize(dir2), normalize(dir3)));
    vec3 N3 = normalize(cross(normalize(dir3), normalize(dir0)));

    if ((dot(N0, (vertex - orig)) > 0 && dot(N1, (vertex - orig)) > 0 && dot(N2, (vertex - orig)) > 0 && dot(N3, (vertex - orig)) > 0)) {
      active_selected = true;
      last_selection_if_selected = int(active_selection[i * 16 + 15]);
    }
  }

  int last_negative_selection_if_selected = -1;
  for (int i = 0; i < number_of_active_negative_selections; i++) {
    vec3 orig = vec3(
      active_negative_selection[i * 16 + 0 * 3 + 0],
      active_negative_selection[i * 16 + 0 * 3 + 1],
      active_negative_selection[i * 16 + 0 * 3 + 2]);
    vec3 dir0 = vec3(
      active_negative_selection[i * 16 + 1 * 3 + 0],
      active_negative_selection[i * 16 + 1 * 3 + 1],
      active_negative_selection[i * 16 + 1 * 3 + 2]);
    vec3 dir1 = vec3(
      active_negative_selection[i * 16 + 2 * 3 + 0],
      active_negative_selection[i * 16 + 2 * 3 + 1],
      active_negative_selection[i * 16 + 2 * 3 + 2]);
    vec3 dir2 = vec3(
      active_negative_selection[i * 16 + 3 * 3 + 0],
      active_negative_selection[i * 16 + 3 * 3 + 1],
      active_negative_selection[i * 16 + 3 * 3 + 2]);
    vec3 dir3 = vec3(
      active_negative_selection[i * 16 + 4 * 3 + 0],
      active_negative_selection[i * 16 + 4 * 3 + 1],
      active_negative_selection[i * 16 + 4 * 3 + 2]);

    vec3 N0 = normalize(cross(normalize(dir0), normalize(dir1)));
    vec3 N1 = normalize(cross(normalize(dir1), normalize(dir2)));
    vec3 N2 = normalize(cross(normalize(dir2), normalize(dir3)));
    vec3 N3 = normalize(cross(normalize(dir3), normalize(dir0)));

    if ((dot(N0, (vertex - orig)) > 0 && dot(N1, (vertex - orig)) > 0 && dot(N2, (vertex - orig)) > 0 && dot(N3, (vertex - orig)) > 0)) {
      last_negative_selection_if_selected = int(active_negative_selection[i * 16 + 15]);
    }
  }

  if (active_selected &&
      last_selection_if_selected >
      last_negative_selection_if_selected) {
    selection[id] = uint(0);
  }


}
